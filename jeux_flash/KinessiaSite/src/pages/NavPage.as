package pages {	import com.gaiaframework.events.GaiaSWFAddressEvent;	import com.gaiaframework.events.GaiaEvent;	import com.gaiaframework.core.GaiaContextMenu;	import com.gaiaframework.api.Gaia;	import com.gaiaframework.api.IBitmap;	import com.gaiaframework.templates.AbstractPage;	import com.greensock.TweenMax;	import flash.display.Bitmap;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	public class NavPage extends AbstractPage {		public var menu:MovieClip;		private var _logo:Sprite;		private var _previousButton:MovieClip;		public function NavPage() {			super();			alpha = 0;			new Scaffold(this);		}		override public function transitionIn():void {			super.transitionIn();			TweenMax.to(this, 0.4, {alpha:1, onComplete:transitionInComplete});			menu.x = (stage.stageWidth - menu.width) / 2;			menu.y = 190;			menu.game.hoverGame.alpha = menu.howToPlay.hoverHowToPlay.alpha = menu.machine.hoverMachine.alpha = menu.further.hoverFurther.alpha = 0;			menu.home.hoverHome.buttonMode = menu.game.hoverGame.buttonMode = menu.howToPlay.hoverHowToPlay.buttonMode = menu.machine.hoverMachine.buttonMode = menu.further.hoverFurther.buttonMode = true;			_previousButton = menu.home.hoverHome;			_logo = new Sprite();			addChild(_logo);			_logo.addChild(new Bitmap(IBitmap(assets.logo).bitmapData));			_logo.x = (stage.stageWidth - _logo.width) / 2;			_logo.y = 5;			_logo.buttonMode = true;			_logo.name = "logo";			_logo.addEventListener(MouseEvent.CLICK, _gotoPage);			menu.home.hoverHome.addEventListener(MouseEvent.CLICK, _gotoPage);			menu.game.hoverGame.addEventListener(MouseEvent.CLICK, _gotoPage);			menu.howToPlay.hoverHowToPlay.addEventListener(MouseEvent.CLICK, _gotoPage);			menu.machine.hoverMachine.addEventListener(MouseEvent.CLICK, _gotoPage);			menu.further.hoverFurther.addEventListener(MouseEvent.CLICK, _gotoPage);			menu.home.hoverHome.addEventListener(MouseEvent.MOUSE_OVER, _overMenu);			menu.game.hoverGame.addEventListener(MouseEvent.MOUSE_OVER, _overMenu);			menu.howToPlay.hoverHowToPlay.addEventListener(MouseEvent.MOUSE_OVER, _overMenu);			menu.machine.hoverMachine.addEventListener(MouseEvent.MOUSE_OVER, _overMenu);			menu.further.hoverFurther.addEventListener(MouseEvent.MOUSE_OVER, _overMenu);			menu.game.hoverGame.addEventListener(MouseEvent.MOUSE_OUT, _outMenu);			menu.howToPlay.hoverHowToPlay.addEventListener(MouseEvent.MOUSE_OUT, _outMenu);			menu.machine.hoverMachine.addEventListener(MouseEvent.MOUSE_OUT, _outMenu);			menu.further.hoverFurther.addEventListener(MouseEvent.MOUSE_OUT, _outMenu);			stage.addEventListener(Event.RESIZE, _onResize);		}		override public function onDeeplink(aEvt:GaiaSWFAddressEvent):void {			_myDeeplinkHandler(aEvt.deeplink);		}		private function _myDeeplinkHandler(deeplink:String):void {						//TODO gérer le swf event et click droit !			trace('ok' + deeplink);		}		private function _gotoPage(mEvt:MouseEvent):void {			if (mEvt.target.name != _previousButton.name && !(_previousButton.name == "hoverHome" && mEvt.target.name == "logo")) {				TweenMax.to(_previousButton, 0.4, {alpha:0});				_previousButton.addEventListener(MouseEvent.MOUSE_OUT, _outMenu);				if (mEvt.target.name == "logo") {					TweenMax.to(menu.home.hoverHome, 0.4, {alpha:1});				}				if (mEvt.target.name != "logo") {					mEvt.target.removeEventListener(MouseEvent.MOUSE_OUT, _outMenu);				} else {					menu.home.hoverHome.removeEventListener(MouseEvent.MOUSE_OUT, _outMenu);				}				switch (mEvt.target.name) {					case "logo":						Gaia.api.goto(Pages.HOME);						break;					case "hoverHome":						Gaia.api.goto(Pages.HOME);						break;					case "hoverGame":						Gaia.api.goto(Pages.GAME);						break;					case "hoverHowToPlay":						Gaia.api.goto(Pages.HOWTOPLAY);						break;					case "hoverMachine":						Gaia.api.goto(Pages.MACHINE);						break;					case "hoverFurther":						Gaia.api.goto(Pages.FURTHER);						break;				}				if (mEvt.target.name == "logo") {					_previousButton = menu.home.hoverHome;				} else {					_previousButton = MovieClip(mEvt.target);				}			}		}		private function _overMenu(mEvt:MouseEvent):void {			TweenMax.to(mEvt.target, 0.4, {alpha:1});		}		private function _outMenu(mEvt:MouseEvent):void {			TweenMax.to(mEvt.target, 0.4, {alpha:0});		}		private function _onResize(evt:Event):void {			_logo.x = (stage.stageWidth - _logo.width) / 2;			menu.x = (stage.stageWidth - menu.width) / 2;		}		override public function transitionOut():void {			super.transitionOut();			TweenMax.to(this, 0.4, {alpha:0, onComplete:transitionOutComplete});		}	}}
package pages {	import pages.decor.DecorEvent;	import pages.decor.enceinte.AEnceinte;	import pages.decor.platine.APlatine;	import pages.ia.IAEvent;	import pages.ia.Joueur;	import pages.ia.Machine;	import pages.son.PlaylistSon;	import com.gaiaframework.templates.AbstractPage;	import com.greensock.TweenMax;	public class JeuPage extends AbstractPage {		public var enceinte:AEnceinte;		public var platine:APlatine;		private var _machine:Machine;		private var _joueur:Joueur;		private var _nbSon:uint;		public function JeuPage() {			super();			alpha = 0;			new Scaffold(this);		}		override public function transitionIn():void {			super.transitionIn();			TweenMax.to(this, 0.3, {alpha:1, onComplete:transitionInComplete});			_initGame();		}		private function _initGame():void {			PlaylistSon.init();			enceinte.init();			platine.init();			_machine = new Machine();			_joueur = new Joueur(stage);			_joueur.addEventListener(DecorEvent.DISQUE_BAS, _animPerso);			_joueur.addEventListener(DecorEvent.DISQUE_HAUT, _animPerso);			_joueur.addEventListener(DecorEvent.FADER_SCRASH_BAS, _animPerso);			_joueur.addEventListener(DecorEvent.FADER_SCRASH_HAUT, _animPerso);			_joueur.addEventListener(IAEvent.SCORE_SEQUENCE_REUSSIE, _updateScore);			_joueur.addEventListener(IAEvent.SCORE_SON_REUSSI, _updateScore);			_joueur.addEventListener(IAEvent.SCORE_SON_ERREUR, _updateScore);			_lancerBattle();		}		private function _lancerBattle(iaEvt:IAEvent = null):void {			_joueur.removeEventListener(IAEvent.JOUEUR_COMPLETE, _lancerBattle);			_joueur.removeEventListener(IAEvent.JOUEUR_FAIL, _finJeu);			if (iaEvt != null && iaEvt.type == "JOUEUR_SEQUENCE_ECHEC") {				_machine.definirSequence(_nbSon);			} else {				_machine.definirSequence(++_nbSon);			}			_machine.addEventListener(IAEvent.MACHINE_COMPLETE, _reproduireSeqPourJoueur);		}		private function _reproduireSeqPourJoueur(iaEvt:IAEvent):void {			_machine.removeEventListener(IAEvent.MACHINE_COMPLETE, _reproduireSeqPourJoueur);			_joueur.reproduireSequence(_nbSon);			_joueur.addEventListener(IAEvent.JOUEUR_COMPLETE, _lancerBattle);			_joueur.addEventListener(IAEvent.JOUEUR_SEQUENCE_ECHEC, _recommenceSeq);			_joueur.addEventListener(IAEvent.JOUEUR_FAIL, _finJeu);			_joueur.addEventListener(IAEvent.JOUEUR_WIN, _finJeu);		}		private function _recommenceSeq(iaEvt:IAEvent):void {			_joueur.removeEventListener(IAEvent.JOUEUR_COMPLETE, _lancerBattle);			_joueur.removeEventListener(IAEvent.JOUEUR_SEQUENCE_ECHEC, _recommenceSeq);			_joueur.removeEventListener(IAEvent.JOUEUR_FAIL, _finJeu);			_joueur.removeEventListener(IAEvent.JOUEUR_WIN, _finJeu);			_lancerBattle(iaEvt);		}		private function _finJeu(iaEvt:IAEvent):void {			_joueur.removeEventListener(IAEvent.JOUEUR_COMPLETE, _lancerBattle);			_joueur.removeEventListener(IAEvent.JOUEUR_SEQUENCE_ECHEC, _recommenceSeq);			_joueur.removeEventListener(IAEvent.JOUEUR_FAIL, _finJeu);			_joueur.removeEventListener(IAEvent.JOUEUR_WIN, _finJeu);			switch (iaEvt.type) {				case "JOUEUR_FAIL":					trace('YOU LOSE ! score : ' + platine.getScore());					break;				case "JOUEUR_WIN":					trace('YOU WIN ! score : ' + platine.getScore());					break;			}		}		private function _updateScore(iaEvt:IAEvent):void {			platine.ajoutScore(iaEvt.addScore);		}		private function _animPerso(dEvt:DecorEvent):void {			platine.animPerso(dEvt.type);		}		override public function transitionOut():void {			super.transitionOut();			TweenMax.to(this, 0.3, {alpha:0, onComplete:transitionOutComplete});		}	}}
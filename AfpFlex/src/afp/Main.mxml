<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx" resize="_resize(event)"
	applicationComplete="_applicationComplete(event)">
	<fx:Script>
		<![CDATA[

			import alamboley.utils.PrintR;
			import afp.core.Config;
			import afp.remoting.Service;
			import afp.services.vo.PhotoVO;

			import com.adobe.serialization.json.JSON;
			import com.facebook.graph.FacebookDesktop;

			import mx.collections.ArrayCollection;
			import mx.controls.ToolTip;
			import mx.core.FlexGlobals;

			private var _service:Service;
			private var _nbAlbumToCreate:uint;
			private var _memoireAlbumPhotoID:Number;
			private var _bitmap:Bitmap;

			[Bindable]
			private var _events:ArrayCollection = new ArrayCollection();

			[Bindable]
			private var _images:ArrayCollection = new ArrayCollection();

			[Bindable]
			private var _imagesToValidate:ArrayCollection = new ArrayCollection();

			[Bindable]
			private var _imagesToValidateF:ArrayCollection = new ArrayCollection();

			private function _applicationComplete(evt:Event):void {
				resizeToolTip();

				nativeWindow.maximize();
				_getEvents();
			}

			private function _getEvents():void {

				_service = new Service(Config.SERVICES_URL + "eventservice.php");
				_service.onResult.addOnce(_addEvents);
				_service.onError.addOnce(_onError);
				_service.getallevents();
			}

			private function _addEvents(events:Object):void {

				var object:Object = com.adobe.serialization.json.JSON.decode(String(events)).AFPResponse.dataObject;

				for each (var event:Object in object) {
					_events.addItem(event);
				}

			}

			private function _eventChange():void {

				_service = new Service(Config.SERVICES_URL + "mediaservice.php");

				_service.onResult.addOnce(_loadPictures);
				_service.onError.addOnce(_onError);
				_service.getphotosforevent(comboBoxEvents.selectedItem.id);
			}

			private function _eventChangeF():void {

				_service = new Service(Config.SERVICES_URL + "mediaservice.php");

				_service.onResult.addOnce(_loadPicturesF);
				_service.onError.addOnce(_onError);
				_service.getphotosforevent(comboBoxEventsF.selectedItem.id);
			}

			private function _loadPictures(pictures:Object):void {

				_images.removeAll();

				for each (var pict:Object in com.adobe.serialization.json.JSON.decode(String(pictures)).AFPResponse.dataObject) {

					if (pict.etat == 0) {

						pict.url = Config.SERVICES_URL + pict.url;

						var identique:Boolean = false;
						for each (var pictAlreadyAdded:Object in _imagesToValidate) {

							if (pict.url == pictAlreadyAdded.url) {
								identique = true;
								break;
							}
						}

						if (identique == false) {

							_images.addItem(pict);
						}
					}
				}
			}

			private function _onError(error:Object):void {
				trace("error");
			}

			private function _resize(evt:Event):void {
				resizeToolTip();
			}

			private function resizeToolTip():void {
				ToolTip.maxWidth = Math.min(FlexGlobals.topLevelApplication.width, ToolTip.maxWidth);
			}

			private function _validateImage():void {

				if (_imagesToValidate.length > 0) {

					var photoVo:PhotoVO;
					for each (var image:Object in _imagesToValidate) {
						photoVo = new PhotoVO(image);
						photoVo.etat = "1";
						photoVo.description = description.text;

						var url:String = Config.SERVICES_URL + 'mediaservice.php?method=udpatephoto&param=' + com.adobe.serialization.json.JSON.encode(photoVo);
						var request:URLRequest = new URLRequest(url);
						var loader:URLLoader = new URLLoader();

						loader.addEventListener(Event.COMPLETE, _imageValidated);
						request.method = URLRequestMethod.GET;
						loader.load(request);
					}

					_imagesToValidate.removeAll();
				}
			}

			private function _imageValidated(evt:Event):void {

			}

			private function _afficherImage():void {

				if (containerImage.selectedItem) {
					grandeImage.source = containerImage.selectedItem.url;
					description.text = containerImage.selectedItem.description;
				} else if (containerValidateImage.selectedItem) {
					grandeImage.source = containerValidateImage.selectedItem.url;
					description.text = containerValidateImage.selectedItem.description;
				}
			}

			private function _updateText():void {
				if (containerValidateImage.selectedItem)
					containerValidateImage.selectedItem.description = description.text;
			}

			/*
			 * Gestion facebook
			 */
			 
			 private function _loadPicturesF(pictures:Object):void {

				_imagesToValidateF.removeAll();

				for each (var pict:Object in com.adobe.serialization.json.JSON.decode(String(pictures)).AFPResponse.dataObject) {

					if (pict.etat == 1) {

						pict.url = Config.SERVICES_URL + pict.url;

						_imagesToValidateF.addItem(pict);
					}
				}
			}

			private function _init():void {
				FacebookDesktop.init("206351602768348", _handleLogin);
			}

			private function _handleLogin(session:Object, fail:Object):void {
				if (session != null) {
					userImage.source = FacebookDesktop.getImageUrl(session.uid, 'large');
					userName.text = session.user.name;
					facebookBTN.label = "Connecté à facebook";
				}
			}

			protected function facebookBTN_clickHandler(event:MouseEvent):void {
				_init();
				FacebookDesktop.login(_handleLogin, ["user_photos, publish_stream"]);
			}

			protected function onSaveToPhotoAlbumClicked(event:MouseEvent):void {

				if (containerImageF.selectedItem) {
					var loader:Loader = new Loader();
					loader.load(new URLRequest(containerImageF.selectedItem.url));
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, _imageFLoaed);
				}
			}

			private function _imageFLoaed(evt:Event):void {

				evt.target.removeEventListener(Event.COMPLETE, _imageFLoaed);

				var bitmapData:BitmapData = new BitmapData(evt.target.content.width, evt.target.content.height);
				bitmapData.draw(evt.target.content);
				_bitmap = new Bitmap(bitmapData);
				
				FacebookDesktop.api('me/albums', _createAlbumsCalback, {fields:'name'});
			}

			protected function _createAlbumsCalback(result:Object, fail:Object):void {
				
				var albumsToCreate:Array = [];

				for each (var event:Object in _events) {
					albumsToCreate.push(event.nom);
				}				

				var i:int;
				
				for each (var res:Object in result) {
					i = albumsToCreate.indexOf(res.name);
					
					if (comboBoxEventsF.selectedItem.nom == res.name) {
						_memoireAlbumPhotoID = res.id;
					}
					
					if (i != -1)
						albumsToCreate.splice(i, 1);
				}
				
				_nbAlbumToCreate = albumsToCreate.length;
				
				if (_nbAlbumToCreate == 0) _touslesalbumsonetecrees();
				for each (var albumName : String in albumsToCreate) {
					FacebookDesktop.api('me/albums', onAlbumCreationComplete, {name:albumName, message:'Super c\'est l\'album ' + albumName + ' !'}, "POST");
				}
			}

			protected function onAlbumCreationComplete(result:Object, fail:Object):void {
				_nbAlbumToCreate--;
				if (_nbAlbumToCreate == 0) _touslesalbumsonetecrees();
			}

			private function _touslesalbumsonetecrees():void {
				trace('touslesalbumsonetecrees !');
				trace(_memoireAlbumPhotoID);
				FacebookDesktop.api('me/'+_memoireAlbumPhotoID+"/photos", onSaveToPhotoAlbumComplete, {source:_bitmap}, "POST");
			}
			
			protected function onSaveToPhotoAlbumComplete(result:Object, fail:Object):void {
				trace(result, fail);
			}
		]]>
	</fx:Script>


	<fx:Declarations>

	</fx:Declarations>

	<mx:TabNavigator width="100%" height="100%" horizontalCenter="0">
		<s:NavigatorContent label="Gérer les photos">
			<s:VGroup>
				<s:Label text="Sélectionner l'évènement : "/>
				<s:ComboBox id="comboBoxEvents" dataProvider="{_events}"
					selectedIndex="0" labelField="nom" change="_eventChange()"/>

				<s:Label text="Drag and drop l'image et valider"/>

				<s:HGroup>

					<s:List toolTip="image à glisser" height="400"
						width="150" id="containerImage" dataProvider="{_images}"
						itemRenderer="afp.components.ImageAFP"
						dragMoveEnabled="true" dragEnabled="true"
						dropEnabled="true" change="_afficherImage()"/>

					<s:VGroup horizontalAlign="center">
						<s:Image id="grandeImage" height="300" width="300"/>
						<s:TextArea id="description" height="50"
							width="300" toolTip="description" change="_updateText()"/>
						<s:Button toolTip="Mettre à jour les images"
							label="Valider" click="_validateImage()"/>
					</s:VGroup>

					<s:List toolTip="image à déposer" height="400"
						width="150" id="containerValidateImage"
						dataProvider="{_imagesToValidate}"
						itemRenderer="afp.components.ImageAFP"
						dragMoveEnabled="true" dragEnabled="true"
						dropEnabled="true" change="_afficherImage()"/>

				</s:HGroup>

			</s:VGroup>

		</s:NavigatorContent>

		<s:NavigatorContent label="Mettre sur facebook">

			<s:HGroup width="100%">

				<s:VGroup width="200">

					<s:Button id="facebookBTN" x="10" y="67" label="Connexion à Facebook"
						click="facebookBTN_clickHandler(event)"/>
					<s:Image id="userImage" x="10" y="179"/>
					<s:Label id="userName" x="10" y="147" text=""/>

				</s:VGroup>

				<s:VGroup>
					<s:Label text="Sélectionner l'évènement : "/>
					<s:ComboBox id="comboBoxEventsF" dataProvider="{_events}"
						selectedIndex="0" labelField="nom" change="_eventChangeF()"/>

					<s:List toolTip="image à sélectionner" height="400"
						width="150" id="containerImageF" dataProvider="{_imagesToValidateF}"
						itemRenderer="afp.components.ImageAFP"
						dragMoveEnabled="true" dragEnabled="true"
						dropEnabled="true"/>

					<s:Button id="uploadBTN" label="Uploader la photo"
						click="onSaveToPhotoAlbumClicked(event)"/>
				</s:VGroup>

			</s:HGroup>

		</s:NavigatorContent>

	</mx:TabNavigator>

</s:WindowedApplication>
